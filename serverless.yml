service: web-socket-service
frameworkVersion: "3"

plugins:
 - serverless-offline

provider:
  name: aws
  runtime: nodejs16.x
  stage: "dev"
  timeout: 500
  region: eu-central-1
  environment:
    CONNECTION_DB_TABLE: ${self:resources.Resources.MessageTable.Properties.TableName}


  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
      Resource:
        - Fn::GetAtt: [MessageTable, Arn]
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
functions:
  connect:
    handler: handler.connectHandler
    timeout: 500
    events:
      - websocket:
          route: $connect
  disconnect:
    handler: handler.disconnectHandler
    timeout: 500
    events:
      - websocket:
          route: $disconnect
  default:
    handler: handler.defaultHandler
    events:
      - websocket:
          route: $default
  sendmessage:
    handler: handler.sendmessage
    timeout: 500
    events:
      - websocket:
          route: sendmessage

resources:
  Resources:
    MessageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "connectionId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "connectionId"
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: AppConnectionTable
